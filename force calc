import numpy as np
import random as rnd
import math
import numba as nmb  # Using numba to speed up force calculation
# More info: https://numba.pydata.org/numba-doc/latest/user/5minguide.html

"""
Implement potential and force calculation
"""

@nmb.jit(nopython=True)
def gaussianRandomNumbers(sigma):
    """
    Generate two Gaussian random numbers with mean 0 and standard deviation sigma.
    """
    w = 2
    while w >= 1:
        rx1 = 2 * rnd.random() - 1
        rx2 = 2 * rnd.random() - 1
        w = rx1 * rx1 + rx2 * rx2
    w = np.sqrt(-2 * np.log(w) / w)
    return sigma * rx1 * w, sigma * rx2 * w

@nmb.jit(nopython=True)
def thermalize(vx, vy, rmsParticleVelocity):
    """
    Assign random velocity components to all particles from a Gaussian distribution.

    Parameters:
    - vx, vy: Velocity components of particles
    - rmsParticleVelocity: Root mean square velocity
    """
    for i in range(len(vx)):
        vx[i], vy[i] = gaussianRandomNumbers(rmsParticleVelocity)

@nmb.jit(nopython=True)
def pairEnergy(r):
    """
    Calculate the pair potential energy for a given distance r.

    Parameters:
    - r: Distance between two particles

    Returns:
    - Energy of the pair potential
    """
    # TODO: Implement the pair energy calculation here!
    return ### POTENTIAL ###

@nmb.jit(nopython=True)
def pairForce(r):
    """
    Calculate the pair force for a given distance r.

    Parameters:
    - r: Distance between two particles

    Returns:
    - Force magnitude of the pair potential
    """
    # TODO: Implement the pair force calculation here!
    return ### FORCE ###

@nmb.jit(nopython=True)
def pbc_dist(x1, y1, x2, y2, Lx, Ly):
    """
    Calculate the shortest periodic distance between two points within a unit cell.

    Parameters:
    - x1, y1: Coordinates of the first point
    - x2, y2: Coordinates of the second point
    - Lx, Ly: Dimensions of the unit cell

    Returns:
    - dx, dy: Shortest periodic differences along x and y
    - r: Distance between the two points
    """
    dx = x1 - x2
    dy = y1 - y2

    while dx < -0.5 * Lx:
        dx += Lx
    while dx > 0.5 * Lx:
        dx -= Lx

    while dy < -0.5 * Ly:
        dy += Ly
    while dy > 0.5 * Ly:
        dy -= Ly

    return dx, dy, math.sqrt(dx * dx + dy * dy)

@nmb.jit(nopython=True)
def quick_force_calculation(x, y, fx, fy, Lx, Ly, n):
    """
    Perform a fast force and energy calculation for all particle pairs.

    Parameters:
    - x, y: Positions of particles
    - fx, fy: Forces acting on particles
    - Lx, Ly: Dimensions of the unit cell
    - n: Number of particles

    Returns:
    - Epot: Total potential energy
    - Virial: Virial component for pressure calculation
    """
    Epot = 0.0
    Virial = 0.0

    for i in range(n):
        for j in range(i + 1, n):
            dx, dy, r = pbc_dist(x[i], y[i], x[j], y[j], Lx, Ly)
            Epot += pairEnergy(r)
            fij = pairForce(r)
            Virial -= 0.5 * fij * r
            fx[i] += fij * dx / r
            fy[i] += fij * dy / r
            fx[j] -= fij * dx / r
            fy[j] -= fij * dy / r

    return Epot, Virial
