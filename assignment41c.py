import numpy as np
import matplotlib.pyplot as plt
from matplotlib import animation

L = 10

# The grid is n+1 points along x and y, including boundary points 0 and n
n = 20

# The grid spacing is L/n

# The number of iterations
nsteps = 1000

# Initialize the grid to 0
v = np.ones((n+1, n+1)) * 5
### Set corner values
v[0,0] = 10
v[0,n] = 10
v[n,0] = 10
v[n,n] = 10

# Set the boundary conditions
for i in range(1,n):
    v[0,i] = 10
    v[n,i] = 10
    v[i,0] = 5
    v[i,n] = 5

### Set middle value
# v[n//2, n//2] = 0
v[1:-1, 1:-1] = 7

vnew = np.zeros((n+1, n+1))

### Create a converged matrix ###

"""v_conv = np.array([
    [10., 10., 10., 10., 10., 10., 10., 10., 10., 10., 10.],
    [5., 7.5, 8.47891937, 8.91567748, 9.11328702, 9.17113396, 9.11328702, 8.91567748, 8.47891937, 7.5, 5.],
    [5., 6.52108063, 7.5, 8.07050353, 8.36633663, 8.45796182, 8.36633663, 8.07050353, 7.5, 6.52108063, 5.],
    [5., 6.08432252, 6.92949647, 7.5, 7.82359417, 7.92804004, 7.82359417, 7.5, 6.92949647, 6.08432252, 5.],
    [5., 5.88671298, 6.63366337, 7.17640583, 7.5, 7.60701001, 7.5, 7.17640583, 6.63366337, 5.88671298, 5.],
    [5., 5.82886604, 6.54203818, 7.07195996, 7.39298999, 7.5, 7.39298999, 7.07195996, 6.54203818, 5.82886604, 5.],
    [5., 5.88671298, 6.63366337, 7.17640583, 7.5, 7.60701001, 7.5, 7.17640583, 6.63366337, 5.88671298, 5.],
    [5., 6.08432252, 6.92949647, 7.5, 7.82359417, 7.92804004, 7.82359417, 7.5, 6.92949647, 6.08432252, 5.],
    [5., 6.52108063, 7.5, 8.07050353, 8.36633663, 8.45796182, 8.36633663, 8.07050353, 7.5, 6.52108063, 5.],
    [5., 7.5, 8.47891937, 8.91567748, 9.11328702, 9.17113396, 9.11328702, 8.91567748, 8.47891937, 7.5, 5.],
    [10., 10., 10., 10., 10., 10., 10., 10., 10., 10., 10.]
])"""

v_conv = np.array([
    [10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
    [5.0, 7.4999269, 8.48754998, 8.95056529, 9.20155365, 9.3526344, 9.44945723, 9.51283117, 9.55308101, 9.5755276, 9.58275171, 9.5755276, 9.55308101, 9.51283117, 9.44945723, 9.3526344, 9.20155365, 8.95056529, 8.48754998, 7.4999269, 5.0],
    [5.0, 6.51216126, 7.49971477, 8.11316807, 8.50302833, 8.75954311, 8.93238185, 9.04880708, 9.12398701, 9.16630055, 9.1799745, 9.16630055, 9.12398701, 9.04880708, 8.93238185, 8.75954311, 8.50302833, 8.11316807, 7.49971477, 6.51216126, 5.0],
    [5.0, 6.04901044, 6.88599392, 7.49938437, 7.93787538, 8.2501598, 8.47175697, 8.62606853, 8.7278029, 8.78575771, 8.80459091, 8.78575771, 8.7278029, 8.62606853, 8.47175697, 8.2501598, 7.93787538, 7.49938437, 6.88599392, 6.04901044, 5.0],
    [5.0, 5.7978971, 6.4958866, 7.06053062, 7.49896804, 7.83151125, 8.07847139, 8.25596704, 8.37546148, 8.44440283, 8.4669401, 8.44440283, 8.37546148, 8.25596704, 8.07847139, 7.83151125, 7.49896804, 7.06053062, 6.4958866, 5.7978971, 5.0],
    [5.0, 5.64670479, 6.23915165, 6.74792247, 7.16600604, 7.49850653, 7.75472066, 7.94394332, 8.07375588, 8.14953691, 8.17445082, 8.14953691, 8.07375588, 7.94394332, 7.75472066, 7.49850653, 7.16600604, 6.74792247, 6.23915165, 5.64670479, 5.0],
    [5.0, 5.54978679, 6.06612469, 6.52604908, 6.91868787, 7.24186218, 7.49804503, 7.69142295, 7.82618012, 7.90564147, 7.93189271, 7.90564147, 7.82618012, 7.69142295, 7.49804503, 7.24186218, 6.91868787, 6.52604908, 6.06612469, 5.54978679, 5.0],
    [5.0, 5.48633617, 5.94954823, 6.37151499, 6.74090456, 7.05229292, 7.30427119, 7.4976287, 7.63401405, 7.71507296, 7.74195682, 7.71507296, 7.63401405, 7.4976287, 7.30427119, 7.05229292, 6.74090456, 6.37151499, 5.94954823, 5.48633617, 5.0],
    [5.0, 5.44603028, 5.87425731, 6.26961795, 6.62119903, 6.92222701, 7.16922346, 7.3609241, 7.49729829, 7.57880975, 7.60591888, 7.57880975, 7.49729829, 7.3609241, 7.16922346, 6.92222701, 6.62119903, 6.26961795, 5.87425731, 5.44603028, 5.0],
    [5.0, 5.42354939, 5.83187629, 6.2115636, 6.55212931, 6.84629094, 7.08958544, 7.27966982, 7.41557915, 7.49708616, 7.52423997, 7.49708616, 7.41557915, 7.27966982, 7.08958544, 6.84629094, 6.55212931, 6.2115636, 5.83187629, 5.42354939, 5.0],
    [5.0, 5.41631385, 5.81817948, 6.19269722, 6.52954855, 6.82132535, 7.06327433, 7.25272084, 7.38839964, 7.46986016, 7.49701307, 7.46986016, 7.38839964, 7.25272084, 7.06327433, 6.82132535, 6.52954855, 6.19269722, 5.81817948, 5.41631385, 5.0],
    [5.0, 5.42354939, 5.83187629, 6.2115636, 6.55212931, 6.84629094, 7.08958544, 7.27966982, 7.41557915, 7.49708616, 7.52423997, 7.49708616, 7.41557915, 7.27966982, 7.08958544, 6.84629094, 6.55212931, 6.2115636, 5.83187629, 5.42354939, 5.0],
    [5.0, 5.44603028, 5.87425731, 6.26961795, 6.62119903, 6.92222701, 7.16922346, 7.3609241, 7.49729829, 7.57880975, 7.60591888, 7.57880975, 7.49729829, 7.3609241, 7.16922346, 6.92222701, 6.62119903, 6.26961795, 5.87425731, 5.44603028, 5.0],
    [5.0, 5.48633617, 5.94954823, 6.37151499, 6.74090456, 7.05229292, 7.30427119, 7.4976287, 7.63401405, 7.71507296, 7.74195682, 7.71507296, 7.63401405, 7.4976287, 7.30427119, 7.05229292, 6.74090456, 6.37151499, 5.94954823, 5.48633617, 5.0],
    [5.0, 5.54978679, 6.06612469, 6.52604908, 6.91868787, 7.24186218, 7.49804503, 7.69142295, 7.82618012, 7.90564147, 7.93189271, 7.90564147, 7.82618012, 7.69142295, 7.49804503, 7.24186218, 6.91868787, 6.52604908, 6.06612469, 5.54978679, 5.0],
    [5.0, 5.64670479, 6.23915165, 6.74792247, 7.16600604, 7.49850653, 7.75472066, 7.94394332, 8.07375588, 8.14953691, 8.17445082, 8.14953691, 8.07375588, 7.94394332, 7.75472066, 7.49850653, 7.16600604, 6.74792247, 6.23915165, 5.64670479, 5.0],
    [5.0, 5.7978971, 6.4958866, 7.06053062, 7.49896804, 7.83151125, 8.07847139, 8.25596704, 8.37546148, 8.44440283, 8.4669401, 8.44440283, 8.37546148, 8.25596704, 8.07847139, 7.83151125, 7.49896804, 7.06053062, 6.4958866, 5.7978971, 5.0],
    [5.0, 6.04901044, 6.88599392, 7.49938437, 7.93787538, 8.2501598, 8.47175697, 8.62606853, 8.7278029, 8.78575771, 8.80459091, 8.78575771, 8.7278029, 8.62606853, 8.47175697, 8.2501598, 7.93787538, 7.49938437, 6.88599392, 6.04901044, 5.0],
    [5.0, 6.51216126, 7.49971477, 8.11316807, 8.50302833, 8.75954311, 8.93238185, 9.04880708, 9.12398701, 9.16630055, 9.1799745, 9.16630055, 9.12398701, 9.04880708, 8.93238185, 8.75954311, 8.50302833, 8.11316807, 7.49971477, 6.51216126, 5.0],
    [5.0, 7.4999269, 8.48754998, 8.95056529, 9.20155365, 9.3526344, 9.44945723, 9.51283117, 9.55308101, 9.5755276, 9.58275171, 9.5755276, 9.55308101, 9.51283117, 9.44945723, 9.3526344, 9.20155365, 8.95056529, 8.48754998, 7.4999269, 5.0],
    [10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0]
])

fig = plt.figure()
ax = fig.add_subplot(111)
im = ax.imshow(v, cmap=None, interpolation='nearest')
fig.colorbar(im)

# checker=1: no checkboard, checker=2: checkerboard (note: n should be even)
checker = 1

# perform one step of relaxation
def relax(n, v, checker):
    for check in range(0,checker):
        for x in range(1,n):
            for y in range(1,n):
                if (x*(n+1) + y) % checker == check:
                    vnew[x,y] = (v[x-1][y] + v[x+1][y] + v[x][y-1] + v[x][y+1])*0.25

        # Copy back the new values to v
        # Note that you can directly store in v instead of vnew with Gauss-Seidel or checkerboard
        for x in range(1,n):
            for y in range(1,n):
                if (x*(n+1) + y) % checker == check:
                    v[x,y] = vnew[x,y]
    
    ### COMPARE TO CONVERGED MATRIX ###
    v_diff = v_conv - v
    if np.max(np.abs(np.divide(v_diff, v_conv))) <= 0.01:
        print("Error achieved!")

        

def update(step):
    print(step)
    global n, v, checker

    # FuncAnimation calls update several times with step=0,
    # so we needs to skip the update with step=0 to get
    # the correct number of steps 
    if step > 0:
        relax(n, v, checker)

    ### UNDERSÃ–K MAXIMALA FELET ###
    

    im.set_array(v)
    return im,

# we generate nsteps+1 frames, because frame=0 is skipped (see above)
anim = animation.FuncAnimation(fig, update, frames=nsteps+1, interval=200, blit=True, repeat=False)
plt.show()

print(v)


