import numpy as np
import matplotlib.pyplot as plt
from matplotlib import animation

L = 10

# The grid is n+1 points along x and y, including boundary points 0 and n
n = 10

# The grid spacing is L/n

# The number of iterations
nsteps = 1000

# Initialize the grid to 0
v = np.ones((n+1, n+1)) * 5
### Set corner values
v[0,0] = 10
v[0,n] = 10
v[n,0] = 10
v[n,n] = 10

# Set the boundary conditions
for i in range(1,n):
    v[0,i] = 10
    v[n,i] = 10
    v[i,0] = 10
    v[i,n] = 10

### Set middle value
#v[n//2, n//2] = 4

v[1:-1, 1:-1] = 9

vnew = np.zeros((n+1, n+1))

### Create a converged matrix ###

v_conv = np.array([
    [10., 10., 10., 10., 10., 10., 10., 10., 10., 10., 10.],
 [10., 10., 10., 10., 10., 10., 10., 10., 10., 10., 10.],
 [10., 10., 10., 10., 10., 10., 10., 10., 10., 10., 10.],
 [10., 10., 10., 10., 10., 10., 10., 10., 10., 10., 10.],
 [10., 10., 10., 10., 10., 10., 10., 10., 10., 10., 10.],
 [10., 10., 10., 10., 10., 10., 10., 10., 10., 10., 10.],
 [10., 10., 10., 10., 10., 10., 10., 10., 10., 10., 10.],
 [10., 10., 10., 10., 10., 10., 10., 10., 10., 10., 10.],
 [10., 10., 10., 10., 10., 10., 10., 10., 10., 10., 10.],
 [10., 10., 10., 10., 10., 10., 10., 10., 10., 10., 10.],
 [10., 10., 10. ,10., 10., 10. ,10., 10. ,10., 10. ,10.]
])

"""v_conv = np.array( [
    [10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
    [10.0, 9.99951387, 9.99903963, 9.99858919, 9.99817327, 9.99780261, 9.99748573, 9.99723113, 9.99704429, 9.99693068, 9.99689219, 9.99693068, 9.99704429, 9.99723113, 9.99748573, 9.99780261, 9.99817327, 9.99858919, 9.99903963, 9.99951387, 10.0],
    [10.0, 9.99903963, 9.99810306, 9.99721291, 9.9963918, 9.995659, 9.99503374, 9.99453002, 9.99416182, 9.99393648, 9.99386137, 9.99393648, 9.99416182, 9.99453002, 9.99503374, 9.995659, 9.9963918, 9.99721291, 9.99810306, 9.99903963, 10.0],
    [10.0, 9.99858919, 9.99721291, 9.99590567, 9.99469863, 9.99362293, 9.99270329, 9.99196443, 9.99142221, 9.9910925, 9.99098077, 9.9910925, 9.99142221, 9.99196443, 9.99270329, 9.99362293, 9.99469863, 9.99590567, 9.99721291, 9.99858919, 10.0],
    [10.0, 9.99817327, 9.9963918, 9.99469863, 9.9931368, 9.99174293, 9.99055362, 9.98959548, 9.98889511, 9.9884665, 9.98832363, 9.9884665, 9.98889511, 9.98959548, 9.99055362, 9.99174293, 9.9931368, 9.99469863, 9.9963918, 9.99817327, 10.0],
    [10.0, 9.99780261, 9.995659, 9.99362293, 9.99174293, 9.99006749, 9.98863511, 9.9874843, 9.98663977, 9.98612624, 9.98595223, 9.98612624, 9.98663977, 9.9874843, 9.98863511, 9.99006749, 9.99174293, 9.99362293, 9.995659, 9.99780261, 10.0],
    [10.0, 9.99748573, 9.99503374, 9.99270329, 9.99055362, 9.98863511, 9.98699817, 9.98567941, 9.98471543, 9.9841255, 9.98392886, 9.9841255, 9.98471543, 9.98567941, 9.98699817, 9.98863511, 9.99055362, 9.99270329, 9.99503374, 9.99748573, 10.0],
    [10.0, 9.99723113, 9.99453002, 9.99196443, 9.98959548, 9.9874843, 9.98567941, 9.9842293, 9.98316513, 9.98251805, 9.98229877, 9.98251805, 9.98316513, 9.9842293, 9.98567941, 9.9874843, 9.98959548, 9.99196443, 9.99453002, 9.99723113, 10.0],
    [10.0, 9.99704429, 9.99416182, 9.99142221, 9.98889511, 9.98663977, 9.98471543, 9.98316513, 9.98203192, 9.98133841, 9.98110724, 9.98133841, 9.98203192, 9.98316513, 9.98471543, 9.98663977, 9.98889511, 9.99142221, 9.99416182, 9.99704429, 10.0],
    [10.0, 9.99693068, 9.99393648, 9.9910925, 9.9884665, 9.98612624, 9.9841255, 9.98251805, 9.98133841, 9.98062111, 9.98037804, 9.98062111, 9.98133841, 9.98251805, 9.9841255, 9.98612624, 9.9884665, 9.9910925, 9.99393648, 9.99693068, 10.0],
    [10.0, 9.99689219, 9.99386137, 9.99098077, 9.98832363, 9.98595223, 9.98392886, 9.98229877, 9.98110724, 9.98037804, 9.98013497, 9.98037804, 9.98110724, 9.98229877, 9.98392886, 9.98595223, 9.98832363, 9.99098077, 9.99386137, 9.99689219, 10.0],
    [10.0, 9.99693068, 9.99393648, 9.9910925, 9.9884665, 9.98612624, 9.9841255, 9.98251805, 9.98133841, 9.98062111, 9.98037804, 9.98062111, 9.98133841, 9.98251805, 9.9841255, 9.98612624, 9.9884665, 9.9910925, 9.99393648, 9.99693068, 10.0],
    [10.0, 9.99704429, 9.99416182, 9.99142221, 9.98889511, 9.98663977, 9.98471543, 9.98316513, 9.98203192, 9.98133841, 9.98110724, 9.98133841, 9.98203192, 9.98316513, 9.98471543, 9.98663977, 9.98889511, 9.99142221, 9.99416182, 9.99704429, 10.0],
    [10.0, 9.99723113, 9.99453002, 9.99196443, 9.98959548, 9.9874843, 9.98567941, 9.9842293, 9.98316513, 9.98251805, 9.98229877, 9.98251805, 9.98316513, 9.9842293, 9.98567941, 9.9874843, 9.98959548, 9.99196443, 9.99453002, 9.99723113, 10.0],
    [10.0, 9.99748573, 9.99503374, 9.99270329, 9.99055362, 9.98863511, 9.98699817, 9.98567941, 9.98471543, 9.9841255, 9.98392886, 9.9841255, 9.98471543, 9.98567941, 9.98699817, 9.98863511, 9.99055362, 9.99270329, 9.99503374, 9.99748573, 10.0],
    [10.0, 9.99780261, 9.995659, 9.99362293, 9.99174293, 9.99006749, 9.98863511, 9.9874843, 9.98663977, 9.98612624, 9.98595223, 9.98612624, 9.98663977, 9.9874843, 9.98863511, 9.99006749, 9.99174293, 9.99362293, 9.995659, 9.99780261, 10.0],
    [10.0, 9.99817327, 9.9963918, 9.99469863, 9.9931368, 9.99174293, 9.99055362, 9.98959548, 9.98889511, 9.9884665, 9.98832363, 9.9884665, 9.98889511, 9.98959548, 9.99055362, 9.99174293, 9.9931368, 9.99469863, 9.9963918, 9.99817327, 10.0],
    [10.0, 9.99858919, 9.99721291, 9.99590567, 9.99469863, 9.99362293, 9.99270329, 9.99196443, 9.99142221, 9.9910925, 9.99098077, 9.9910925, 9.99142221, 9.99196443, 9.99270329, 9.99362293, 9.99469863, 9.99590567, 9.99721291, 9.99858919, 10.0],
    [10.0, 9.99903963, 9.99810306, 9.99721291, 9.9963918, 9.995659, 9.99503374, 9.99453002, 9.99416182, 9.99393648, 9.99386137, 9.99393648, 9.99416182, 9.99453002, 9.99503374, 9.995659, 9.9963918, 9.99721291, 9.99810306, 9.99903963, 10.0],
    [10.0, 9.99951387, 9.99903963, 9.99858919, 9.99817327, 9.99780261, 9.99748573, 9.99723113, 9.99704429, 9.99693068, 9.99689219, 9.99693068, 9.99704429, 9.99723113, 9.99748573, 9.99780261, 9.99817327, 9.99858919, 9.99903963, 9.99951387, 10.0],
    [10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0]
]
)"""

fig = plt.figure()
ax = fig.add_subplot(111)
im = ax.imshow(v, cmap=None, interpolation='nearest')
fig.colorbar(im)

# checker=1: no checkboard, checker=2: checkerboard (note: n should be even)
checker = 2

# perform one step of relaxation
def relax(n, v, checker):
    for check in range(0,checker):
        for x in range(1,n):
            for y in range(1,n):
                if (x*(n+1) + y) % checker == check:
                    v[x,y] = (v[x-1][y] + v[x+1][y] + v[x][y-1] + v[x][y+1])*0.25

        # Copy back the new values to v
        # Note that you can directly store in v instead of vnew with Gauss-Seidel or checkerboard
        """for x in range(1,n):
            for y in range(1,n):
                if (x*(n+1) + y) % checker == check:
                    v[x,y] = vnew[x,y]"""
    
    ### COMPARE TO CONVERGED MATRIX ###
    v_diff = v_conv - v
    if np.max(np.abs(np.divide(v_diff, v_conv))) <= 0.01:
        print("Error achieved!") 

def update(step):
    print(step)
    global n, v, checker

    # FuncAnimation calls update several times with step=0,
    # so we needs to skip the update with step=0 to get
    # the correct number of steps 
    if step > 0:
        relax(n, v, checker)

    ### UNDERSÃ–K MAXIMALA FELET ###
    

    im.set_array(v)
    return im,



# we generate nsteps+1 frames, because frame=0 is skipped (see above)
anim = animation.FuncAnimation(fig, update, frames=nsteps+1, interval=200, blit=True, repeat=False)
plt.show()

print(v)

