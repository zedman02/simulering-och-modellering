import numpy as np
import matplotlib.pyplot as plt

# Function to perform a random walk starting at (x, y) until it hits the boundary
def random_walk(grid, start_x, start_y):
    x, y = start_x, start_y
    n, m = grid.shape
    while 0 < x < n-1 and 0 < y < m-1:  # Stay within the interior of the grid
        step = np.random.choice(["up", "down", "left", "right"])
        if step == "up":
            x -= 1
        elif step == "down":
            x += 1
        elif step == "left":
            y -= 1
        elif step == "right":
            y += 1

    # Return the boundary value where the walker ends up
    return grid[x, y]

# Function to estimate the potential at a point using random walks
def estimate_potential(grid, start_x, start_y, num_walks):
    boundary_values = [random_walk(grid, start_x, start_y) for _ in range(num_walks)]
    return np.mean(boundary_values)

# Initialize the grid with the specified boundary conditions
def initialize_asymmetric_boundaries(n):
    """
    Initialize the grid with specific boundary conditions:
    - Top and bottom sides: 10V
    - Left and right sides: 5V
    """
    grid = np.zeros((n + 2, n + 2))  # Include boundary points
    grid[0, :] = 10  # Bottom boundary
    grid[-1, :] = 10  # Top boundary
    grid[:, 0] = 5   # Left boundary
    grid[:, -1] = 5  # Right boundary
    return grid

# Function to estimate the potential for all interior points using random walks
def random_walk_solution(grid, num_walks):
    n, m = grid.shape
    potential = np.zeros_like(grid)
    for i in range(1, n-1):
        for j in range(1, m-1):
            potential[i, j] = estimate_potential(grid, i, j, num_walks)
    return potential

# Plotting function
def plot_potential(potential, title):
    plt.figure(figsize=(8, 6))
    plt.contourf(potential, levels=20, cmap='viridis')
    plt.colorbar(label="Potential (V)")
    plt.title(title)
    plt.xlabel("X")
    plt.ylabel("Y")
    plt.show()

# Main simulation
if __name__ == "__main__":
    # Grid size for testing
    grid_size = 9

    # Initialize the grid with asymmetric boundary conditions
    asymmetric_grid = initialize_asymmetric_boundaries(grid_size)

    # Simulate random walks for n = 100
    num_walks_100 = 100
    potential_asymmetric_100 = random_walk_solution(asymmetric_grid, num_walks_100)

    # Simulate random walks for n = 1000
    num_walks_1000 = 1000
    potential_asymmetric_1000 = random_walk_solution(asymmetric_grid, num_walks_1000)

    # Plot the results
    plot_potential(potential_asymmetric_100, title="Asymmetric Boundaries (n=100 Random Walks)")
    plot_potential(potential_asymmetric_1000, title="Asymmetric Boundaries (n=1000 Random Walks)")
